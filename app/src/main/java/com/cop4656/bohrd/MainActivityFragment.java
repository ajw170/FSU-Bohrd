package com.cop4656.bohrd;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.Handler;
import android.preference.PreferenceManager;
import android.provider.Settings;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import android.util.Log;

import org.w3c.dom.Text;

import java.security.SecureRandom;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * A placeholder fragment containing a simple view.
 */
public class MainActivityFragment extends Fragment {

    public static final String SPEED_CHOICE = "pref_speedChoice";

    //declare static class
    public static class MyAlertDialogFragment extends DialogFragment
    {
        @Override
        public Dialog onCreateDialog(Bundle bundle)
        {
            int roundNumber = getArguments().getInt("roundNumber");
            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
            builder.setMessage(getString(R.string.game_end_dialog,roundNumber));
            builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    //do nothing
                }
            });

            return builder.create();
        }
    }


    //The list that stores the sequence of buttons generated by the computer
    private List<Integer> computerButtonSequenceList;
    //The list that stores the sequence in which the user presses the buttons
    private List<Integer> userButtonSequenceList;

    //the speed of the game
    private int timeChanger = 2;  //default "normal" speed

    //keeps track of how many turns and also the record play number
    private int turnNumber;
    private int recordNumber;
    private int sequenceNumber;
    private int buttonPressSequence;

    //reference list that refer to GUI components
    private TextView moveCounter;
    private TextView recordKeeper;
    public TextView playAgain;
    private LinearLayout[] buttonLayout;

    private int button1;
    private int button2;
    private int button3;
    private int button4;
    private int button5;
    private int button6;
    private int button7;
    private int button8;
    private int button9;

    //used to delay the display
    private Handler handler;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        super.onCreateView(inflater, container, savedInstanceState);
        final View view = inflater.inflate(R.layout.fragment_main, container, false);

        handler = new Handler();

        //get references to items
        moveCounter = (TextView) view.findViewById(R.id.moveCounter);
        recordKeeper = (TextView) view.findViewById(R.id.recordKeeper);
        playAgain = (TextView) view.findViewById(R.id.playAgainView);

        buttonLayout = new LinearLayout[3];

        buttonLayout[0] = (LinearLayout) view.findViewById(R.id.buttonsRow1);
        buttonLayout[1] = (LinearLayout) view.findViewById(R.id.buttonsRow2);
        buttonLayout[2] = (LinearLayout) view.findViewById(R.id.buttonsRow3);

        button1 = ((Button) view.findViewById(R.id.gameButton1)).getId();
        button2 = ((Button) view.findViewById(R.id.gameButton2)).getId();
        button3 = ((Button) view.findViewById(R.id.gameButton3)).getId();
        button4 = ((Button) view.findViewById(R.id.gameButton4)).getId();
        button5 = ((Button) view.findViewById(R.id.gameButton5)).getId();
        button6 = ((Button) view.findViewById(R.id.gameButton6)).getId();
        button7 = ((Button) view.findViewById(R.id.gameButton7)).getId();
        button8 = ((Button) view.findViewById(R.id.gameButton8)).getId();
        button9 = ((Button) view.findViewById(R.id.gameButton9)).getId();

        //create button listeners
        for (LinearLayout row : buttonLayout) {
            for (int column = 0; column < row.getChildCount(); column++) {
                Button button = (Button) row.getChildAt(column);
                button.setOnClickListener(buttonListener);
            }
        }

        moveCounter.setText(getString(R.string.move_counter,turnNumber));
        recordKeeper.setText(getString(R.string.record_value,turnNumber));

        //create play again listener
        playAgain.setOnClickListener(viewListener);
        playAgain.setText(R.string.start_game);

        //disable buttons
        disableButtons();
        computerButtonSequenceList = new ArrayList<>();
        userButtonSequenceList = new ArrayList<>();
        turnNumber = 1;
        recordNumber = 0;
        sequenceNumber = 0;

        return view;
    }

    //sets the timeChanger
    public void setTimeChanger(int choice)
    {
        timeChanger = choice;
    }

    //runs the game sequence
    private void runGame()
    {
        buttonPressSequence = 0; //reset the user button sequence
        playAgain.setText(R.string.reset_game);
        disableButtons();
        //update the move counter
        moveCounter.setText(getString(R.string.move_counter,turnNumber));

        if (turnNumber > recordNumber)
        {
            recordNumber = turnNumber;
            recordKeeper.setText(getString(R.string.record_value,turnNumber));
        }


        //update the recordNumber

        userButtonSequenceList.clear();
        sequenceNumber = 0;
        //generate random numbers from 1 to 9 depending on the turn number
        SecureRandom random = new SecureRandom();
        int numberToAdd = random.nextInt(9) + 1;

        computerButtonSequenceList.add(numberToAdd);
        //for debug purposes
        Log.i("computerButton",Integer.toString(numberToAdd));

        int size = computerButtonSequenceList.size();
        int buttonId = 0;

        //int lightUpSeconds = 1000;
        //int lightDownSeconds = 1500;
        int lightUpSeconds = 500 * timeChanger;
        int lightDownSeconds = 750 * timeChanger;

        for(int i=0; i < size; ++i) {
            int buttonNum = computerButtonSequenceList.get(i);
            switch (buttonNum) {
                case 1:
                    buttonId = button1;
                    break;
                case 2:
                    buttonId = button2;
                    break;
                case 3:
                    buttonId = button3;
                    break;
                case 4:
                    buttonId = button4;
                    break;
                case 5:
                    buttonId = button5;
                    break;
                case 6:
                    buttonId = button6;
                    break;
                case 7:
                    buttonId = button7;
                    break;
                case 8:
                    buttonId = button8;
                    break;
                case 9:
                    buttonId = button9;
                    break;
                default:
                    break;
            }

            final int buttonIdPassed = buttonId;

            fillButton(buttonIdPassed, lightUpSeconds);
            unfillButton(buttonIdPassed, lightDownSeconds);

            lightUpSeconds += (500 * timeChanger);
            lightDownSeconds += (500 * timeChanger);
        }
        enableButtonsAfterDelay(lightDownSeconds - 500 * timeChanger);
    }

    private void enableButtonsAfterDelay(final int time)
    {
        handler.postDelayed(new Runnable(){
            @Override
            public void run() {
                enableButtons();
            }
        },time);
    }

    private void fillButton(final int buttonIdPassed, int i)
    {
        handler.postDelayed(new Runnable(){
            @Override
            public void run()
            {
                Button button = getActivity().findViewById(buttonIdPassed);
                button.setBackgroundColor(getResources().getColor(R.color.holo_red_darker));
            }
        },i);
    }

    private void unfillButton(final int buttonIdPassed, int i)
    {
        handler.postDelayed(new Runnable(){
            @Override
            public void run()
            {
                Button button = getActivity().findViewById(buttonIdPassed);
                button.setBackground(getResources().getDrawable(R.drawable.button_bg_stroke));
            }

    }, i);
    }

    private OnClickListener viewListener = new OnClickListener() {
        @Override
        public void onClick(View v) {
            TextView clickedView = ((TextView)v);
            resetGame();
            runGame();
        }
    };

    public void resetGame()
    {
        disableButtons();
        computerButtonSequenceList.clear();
        userButtonSequenceList.clear();
        turnNumber = 1;
        sequenceNumber = 0;
    }


    private OnClickListener buttonListener = new OnClickListener() {
        @Override
        public void onClick(View v) {
            final Button clickedButton = ((Button) v);
            clickedButton.setBackgroundColor(getResources().getColor(R.color.holo_red_darker));
            handler.postDelayed(new Runnable(){
                @Override
                public void run()
                {
                    clickedButton.setBackground(getResources().getDrawable(R.drawable.button_bg_stroke));
                }
            },100);
            Integer buttonId = clickedButton.getId();
            //determine which button it is, and assign appropriate integer
            int buttonNumber = 0;
            if (buttonId == button1)
                buttonNumber = 1;
            else if (buttonId == button2)
                buttonNumber = 2;
            else if (buttonId == button3)
                buttonNumber = 3;
            else if (buttonId == button4)
                buttonNumber = 4;
            else if (buttonId == button5)
                buttonNumber = 5;
            else if (buttonId == button6)
                buttonNumber = 6;
            else if (buttonId == button7)
                buttonNumber = 7;
            else if (buttonId == button8)
                buttonNumber = 8;
            else if (buttonId == button9)
                buttonNumber = 9;
            else
                Log.e("Button Error","An error occurred. You should never get here.");

            //send button number clicked to buttonClickAnalyze
            buttonClickAnalyze(buttonNumber);
        }


    };

    private void buttonClickAnalyze(int buttonNum)
    {
        ++sequenceNumber; //the number of buttons that could potentially be pressed

        userButtonSequenceList.add(buttonNum);
        //all we need to do here is check to see if the game is still in play

        //check to to seee if the button under analysis matches the comptuer list
        int computerNum = computerButtonSequenceList.get(buttonPressSequence);
        int userNum = userButtonSequenceList.get(buttonPressSequence);
        if (computerNum != userNum)
        {
            DialogFragment gameEndMessageDialog = new MyAlertDialogFragment();
            Bundle args = new Bundle();
            args.putInt("roundNumber",turnNumber);
            gameEndMessageDialog.setArguments(args);
            gameEndMessageDialog.setCancelable(false);
            gameEndMessageDialog.show(getFragmentManager(),"End Game Results");
            disableButtons();
            playAgain.setText(R.string.play_again);
        }
        else
        {
            ++buttonPressSequence;
        }


        if (sequenceNumber == turnNumber) //if we tapped the number of buttons in the turn
        {
            //determine if the lists are equal
            if (userButtonSequenceList.equals(computerButtonSequenceList))
            {
                ++turnNumber;
                runGame();
            }
            else //in theory you would never get here, I left this in for legacy purposes
            {
                disableButtons();
                playAgain.setText(R.string.play_again);
                //display message showing the score, update record if necessary
            }
        }
    }



    private void disableButtons() {
        for (int row = 0; row < 3; row++) {
            LinearLayout buttonRow = buttonLayout[row];
            for (int i = 0; i < buttonRow.getChildCount(); i++)
                buttonRow.getChildAt(i).setEnabled(false);
        }
    }

    private void enableButtons() {
        for (int row = 0; row < 3; row++) {
            LinearLayout buttonRow = buttonLayout[row];
            for (int i = 0; i < buttonRow.getChildCount(); i++)
                buttonRow.getChildAt(i).setEnabled(true);
        }
    }
}
